---
http_interactions:
- request:
    method: get
    uri: https://maps.googleapis.com/maps/api/directions/json?destination=Universal%20Studios%20Hollywood&key=GOOGLE-DIRECTIONS-API-KEY&origin=Disneyland
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v0.15.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Wed, 31 Jul 2019 15:49:12 GMT
      Expires:
      - Wed, 31 Jul 2019 15:51:12 GMT
      Cache-Control:
      - public, max-age=120
      Vary:
      - Accept-Language
      Server:
      - mafe
      Content-Length:
      - '6384'
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      Server-Timing:
      - gfet4t7; dur=62
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43,39"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 31 Jul 2019 15:49:12 GMT
recorded_with: VCR 5.0.0
